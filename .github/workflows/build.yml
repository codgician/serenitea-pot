name: build
on:
  pull_request:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  repository_dispatch:
    types: [build]
  workflow_dispatch:
# Limit one run for each branch for saving resources
concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:
  validate:
    runs-on: ubuntu-24.04
    outputs:
      darwin: ${{ steps.get_matrix.outputs.darwin }}
      linux: ${{ steps.get_matrix.outputs.linux }}
    steps:
      - uses: thiagokokada/free-disk-space@main
        continue-on-error: true
        with:
          tool-cache: true
          usrlocal: true
          usrmisc: true
          opt: true
          varcache: true
      - name: Checkout new change
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            accept-flake-config = true
            experimental-features = nix-command flakes
            builders-use-substitutes = true
      - name: Check flake
        run: nix flake check --all-systems
      - name: Calculate strategy matrix
        id: get_matrix
        run: |
          linux=$(nix eval .\#nixosConfigurations --raw \
            --apply "x: builtins.toJSON (map (y: { name = y; system = x.\${y}.pkgs.system; }) (builtins.attrNames x))")
          darwin=$(nix eval .\#darwinConfigurations --raw \
            --apply "x: builtins.toJSON (map (y: { name = y; system = x.\${y}.pkgs.system; }) (builtins.attrNames x))")
          echo "linux=$linux" >> $GITHUB_OUTPUT
          echo "darwin=$darwin" >> $GITHUB_OUTPUT
  build-linux:
    needs: validate
    strategy:
      matrix:
        host: ${{ fromJson(needs.validate.outputs.linux) }}
      fail-fast: false
    runs-on: ${{ matrix.host.system == 'aarch64-linux' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    steps:
      - uses: thiagokokada/free-disk-space@main
        continue-on-error: true
        with:
          tool-cache: true
          usrlocal: true
          usrmisc: true
          opt: true
          varcache: true
          debug: true
      - name: Checkout new change
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Create /nix under /mnt
        run: |
          sudo mkdir -p /mnt/nix
          sudo ln -s /mnt/nix /nix
      - uses: cachix/install-nix-action@v31
        with:
          nix_path: 'nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/heads/nixos-unstable.tar.gz'
          extra_nix_config: |
            accept-flake-config = true
            experimental-features = nix-command flakes
            builders-use-substitutes = true
      - uses: cachix/cachix-action@v16
        with:
          name: codgician
          extraPullNames: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      - name: Build
        run: |
          nix build .#nixosConfigurations.${{ matrix.host.name }}.config.system.build.toplevel
  build-darwin:
    needs: validate
    runs-on: macos-latest
    strategy:
      matrix:
        host: ${{ fromJson(needs.validate.outputs.darwin) }}
      fail-fast: false
    steps:
      - name: Checkout new change
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: cachix/install-nix-action@v31
        with:
          nix_path: 'nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/heads/nixos-unstable.tar.gz'
          extra_nix_config: |
            accept-flake-config = true
            experimental-features = nix-command flakes
            builders-use-substitutes = true
            extra-platforms = x86_64-darwin
      - uses: cachix/cachix-action@v16
        with:
          name: codgician
          extraPullNames: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      - name: Build
        run: |
          nix build .#darwinConfigurations.${{ matrix.host.name }}.config.system.build.toplevel
